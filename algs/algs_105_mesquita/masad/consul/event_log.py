'''
**********
Event Log
**********

This module contains the EventLog class, which is used to log events 
generated by a ConSUL model. The EventLog may be subclassed, but it should
work fine directly out of the box.

The EventLog uses a named tuple Event to store discrete events. Events are
defined as having: *source*, *target*, *timestamp*, *action*.
'''

from collections import namedtuple, defaultdict

Event = namedtuple('Event', ["source", "target", "timestamp", "action"])

class EventLog(object):
    '''
    An Event Logger for recording events which occur in a model.

    This simulates the collection of event data from the system being simulated
    and produces data which can then be compared to real event data.

    Attributes:
        events: The raw list of events stored by the logger.
        model_data: Dictionary of model-level parameters and notes.
        actor_data: Dictionary of actor-level parameters and data.

    '''
    events = []
    model_data = {}
    actor_data = {}

    def __init__(self):
        '''
        Create a new event log.
        '''
        self.events = []
        self.model_data = {}
        self.actor_data = {}

    def add_event(self, source, target, timestamp, action):
        '''
        Add a new event to the log.

        Args:
            source: Who is taking the action.
            target: Who is the action directed at.
            timestamp: When is the action taking place?
            action: What is the action itself?
        '''
        event = Event(source, target, timestamp, action)
        self.events.append(event)

    def tversky_index(self, other_log, alpha=1, beta=0):
        '''
        Compute the Tversky Index between this and another event log.

        The `Tversky Index <http://en.wikipedia.org/wiki/Tversky_index>` is an
        asymmetric similariry measure. For example, with alpha=1 and beta=0,
        will return the fraction of events in this event set which ARE present
        in the other_log.

        Args:
            other_log: The EventLog object to compare to.
            alpha: Weight on events in (MyEvents - OtherEvents)
            beta: Weight on events in (OtherEvents - MyEvents)
                Note: when alpha=beta=1, this is the same as the Jaccard index.

        Returns:
            The calculated, directional Tversky index between this and the
            other event set.
        '''
        self_events = set(self.events)
        other_events = set(other_log.events)
        intersection = len(self_events.intersection(other_events))
        complement_1 = len(self_events.difference(other_events))
        complement_2 = len(other_events.difference(self_events))
        return intersection / (intersection + alpha*complement_1 + 
                               beta*complement_2)

    def get_events(self, **kwargs):
        '''
        Return a subset of events with certain values.
        '''
        results = []
        for event in self.events:
            for k, v in kwargs.items():
                if getattr(event, k) != v:
                    break
            else:
                results.append(event)
        return results

    def _get_time_range(self):
        '''
        Helper method to get the list of timesteps in a log.

        Returns:
            A sorted list of all the timestamps which appear at least once in 
            the log.
        '''
        timestamps = set()
        for event in self.events:
            timestamps.add(event.timestamp)
        timestamps = list(timestamps)
        timestamps.sort()
        return timestamps

    def __iter__(self):
        for event in self.events:
            yield event

    def __str__(self):
        return str(self.events)
