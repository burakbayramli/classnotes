/*
 * SVG Salamander
 * Copyright (c) 2004, Mark McKay
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or 
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   - Redistributions of source code must retain the above 
 *     copyright notice, this list of conditions and the following
 *     disclaimer.
 *   - Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials 
 *     provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Mark McKay can be contacted at mark@kitfox.com.  Salamander and other
 * projects can be found at http://www.kitfox.com
 *
 * Created on February 20, 2004, 12:29 PM
 */

package com.kitfox.svg;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Mark McKay
 * @author <a href="mailto:mark@kitfox.com">Mark McKay</a>
 */
public class SVGDisplayPanel extends javax.swing.JPanel implements Scrollable
{
    public static final long serialVersionUID = 1;
    
    SVGDiagram diagram = null;
    float scale = 1f;
    Color bgColor = null;

    /** Creates new form SVGDisplayPanel */
    public SVGDisplayPanel()
    {
        initComponents();
    }

    public SVGDiagram getDiagram()
    {
        return diagram;
    }
    
    public void setDiagram(SVGDiagram diagram)
    {
        this.diagram = diagram;
        diagram.setDeviceViewport(getBounds());
        
        setDimension();
    }

    public void setScale(float scale)
    {
        this.scale = scale;
        setDimension();
    }

    public void setBgColor(Color col)
    {
        bgColor = col;
    }

    private void setDimension()
    {
        if (diagram == null)
        {
            setPreferredSize(new Dimension(1, 1));
            revalidate();
            return;
        }

        final Rectangle2D.Float rect = new Rectangle2D.Float();
        diagram.getViewRect(rect);

        int w = (int)(rect.width * scale);
        int h = (int)(rect.height * scale);

        setPreferredSize(new Dimension(w, h));
        revalidate();
    }

    /**
     * Update this image to reflect the passed time
     * @param curTime
     * @throws com.kitfox.svg.SVGException
     */
    public void updateTime(double curTime) throws SVGException
    {
        if (diagram == null) return;
        
        diagram.updateTime(curTime);
    }
    
    @Override
    public void paintComponent(Graphics gg)
    {
        Graphics2D g = (Graphics2D)gg;

        if (bgColor != null)
        {
            Dimension dim = getSize();
            g.setColor(bgColor);
            g.fillRect(0, 0, dim.width, dim.height);
        }

        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        if (diagram != null) 
        {
            try
            {
                diagram.render(g);
            }
            catch (SVGException e)
            {
                Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING, 
                    "Could not render diagram", e);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setLayout(new java.awt.BorderLayout());

        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            @Override
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        if (diagram != null)
        {
            diagram.setDeviceViewport(getBounds());
            setDimension();
        }

    }//GEN-LAST:event_formComponentResized

    public Dimension getPreferredScrollableViewportSize()
    {
        return getPreferredSize();
    }

    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)
    {
        if (orientation == SwingConstants.HORIZONTAL)
        {
            return visibleRect.width;
        }
        else return visibleRect.height;
    }

    public boolean getScrollableTracksViewportHeight()
    {
        return false;
    }

    public boolean getScrollableTracksViewportWidth()
    {
        return false;
    }

    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)
    {
        return getScrollableBlockIncrement(visibleRect, orientation, direction) / 16;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
